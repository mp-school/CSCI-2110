BinaryTreeDemo Output

Input 1
BinaryTree<String> A = new BinaryTree<String>();
		BinaryTree<String> B = new BinaryTree<String>();
		BinaryTree<String> C = new BinaryTree<String>();
		BinaryTree<String> D = new BinaryTree<String>();
		BinaryTree<String> E = new BinaryTree<String>();
		BinaryTree<String> F = new BinaryTree<String>();

	
		A.makeRoot("A");
		B.makeRoot("B");
		C.makeRoot("C");
		D.makeRoot("D");
		E.makeRoot("E");
		F.makeRoot("F");


		A.attachLeft(B);
		A.attachRight(C);
		B.attachLeft(D);
		B.attachRight(E);
		D.attachLeft(F);

Output 1 
Height of the tree is: 3
Number of nodes in the tree is: 6

Inorder:        F       D       B       E       A       C
Preorder:       A       B       D       F       E       C
Postorder:      F       D       E       B       C       A
Levelorder:     A       B       C       D       E       F

And is it height balanced... No.

Tree 1
 /*        
		        A
              /   \
             B     C
            / \   
           D   E
           / 
          F
    */


Input 2
BinaryTree<String> A = new BinaryTree<String>();
		BinaryTree<String> B = new BinaryTree<String>();
		BinaryTree<String> C = new BinaryTree<String>();
		BinaryTree<String> D = new BinaryTree<String>();
		BinaryTree<String> E = new BinaryTree<String>();
		BinaryTree<String> F = new BinaryTree<String>();
		BinaryTree<String> G = new BinaryTree<String>();
	
		A.makeRoot("A");
		B.makeRoot("B");
		C.makeRoot("C");
		D.makeRoot("D");
		E.makeRoot("E");
		F.makeRoot("F");
		G.makeRoot("G");

		A.attachLeft(B);
		A.attachRight(C);
		B.attachLeft(D);
		B.attachRight(E);
		D.attachLeft(F);
		C.attachLeft(G);



Output 2
Height of the tree is: 3
Number of nodes in the tree is: 7

Inorder:        F       D       B       E       A       G       C
Preorder:       A       B       D       F       E       C       G
Postorder:      F       D       E       B       G       C       A
Levelorder:     A       B       C       D       E       G       F

And is it height balanced... Yes!

Tree 2
 /*        
		        A
              /   \
             B     C
            / \   /
           D   E  G
           / 
          F
    */

Input 3 

	BinaryTree<String> A = new BinaryTree<String>();
		BinaryTree<String> B = new BinaryTree<String>();
		BinaryTree<String> C = new BinaryTree<String>();
		BinaryTree<String> D = new BinaryTree<String>();
		BinaryTree<String> E = new BinaryTree<String>();
		BinaryTree<String> F = new BinaryTree<String>();
		BinaryTree<String> G = new BinaryTree<String>();
		BinaryTree<String> H = new BinaryTree<String>();
	
		A.makeRoot("A");
		B.makeRoot("B");
		C.makeRoot("C");
		D.makeRoot("D");
		E.makeRoot("E");
		F.makeRoot("F");
		G.makeRoot("G");
		H.makeRoot("H");

		A.attachLeft(B);
		A.attachRight(C);
		B.attachLeft(D);
		B.attachRight(E);
		D.attachLeft(F);
		C.attachLeft(G);
		F.attachLeft(H);

Output 3
Height of the tree is: 4
Number of nodes in the tree is: 8

Inorder:        H       F       D       B       E       A       G       C
Preorder:       A       B       D       F       H       E       C       G
Postorder:      H       F       D       E       B       G       C       A
Levelorder:     A       B       C       D       E       G       F       H

And is it height balanced... No.

Tree 3
 /*        
		        A
              /   \
             B     C
            / \   /
           D   E  G
           / 
          F
		 /
		H

    */

______________________________________________________

Excerise2.java

Input 1 
Enter name or done: emboar
Enter name or done: unfezant
Enter name or done: palkia
Enter name or done: seperior
Enter name or done: samurott
Enter name or done: done

Output 1

Height of the tree is: 2
Number of nodes in the tree is: 5

Inorder:        seperior        unfezant        samurott        emboar  	palkia
Preorder:       emboar  		unfezant        seperior        samurott	palkia
Postorder:      seperior        samurott        unfezant        palkia  	emboar
Level order:    emboar  		unfezant        palkia  		seperior    samurott

Tree 1
	/*        
		      emboar
              /   \
        unfezant   palkia
            / \   
    seperior   samurott
          
    */

Input 2
Enter name or done: 1
Enter name or done: 2
Enter name or done: 3
Enter name or done: 4
Enter name or done: 5
Enter name or done: 6
Enter name or done: 7
Enter name or done: 8
Enter name or done: 9
Enter name or done: done

Output 2
Height of the tree is: 4
Number of nodes in the tree is: 9

Inorder:        8       6       9       4       7       2       5       1       3
Preorder:       1       2       4       6       8       9       7       5       3
Postorder:      8       9       6       7       4       5       2       3       1
Level order:    1       2       3       4       5       6       7       8       9

Tree 2
 /*        
		        1
              /   \
             2     3
            / \   
            4  5
           / \
          6   7
         / \
        8  9
    */


Input 3
Enter name or done: A
Enter name or done: B
Enter name or done: C
Enter name or done: D
Enter name or done: E
Enter name or done: F
Enter name or done: G
Enter name or done: H
Enter name or done: I
Enter name or done: J
Enter name or done: K
Enter name or done: L
Enter name or done: M
Enter name or done: DONE

Output 3
Height of the tree is: 6
Number of nodes in the tree is: 13

Inorder:        L       J       M       H       K       F       I       D       G       B       E       A       C
Preorder:       A       B       D       F       H       J       L       M       K       I       G       E       C
Postorder:      L       M       J       K       H       I       F       G       D       E       B       C       A
Level order:    A       B       C       D       E       F       G       H       I       J       K       L       M

Tree 3
/*        
		        A
              /   \
             B     C
            / \
           D   E
          / \
         F   G
        / \
       H   I
      / \
     J   K
    / \
   L   M
*/